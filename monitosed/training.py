# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_training.ipynb.

# %% auto 0
__all__ = ['extract_latent']

# %% ../nbs/04_training.ipynb 4
import torch

# %% ../nbs/04_training.ipynb 5
def extract_latent(state_dict, save_path, save):
    # Extract the latent space
    model.load_state_dict(state_dict, strict=False)
    learn = Learner(dls, model, loss_func=model.aae_loss_func_monitosed)
    learn.zi_valid = torch.tensor([]).to(device)
    learn.labels = torch.tensor([]).to(device)
    learn.get_preds(ds_idx=1,cbs=[GetLatentSpace(cycle_len=1)])
    new_zi = learn.zi_valid
    target = torch.tensor(learn.labels)
    if save: torch.save(new_zi, '/result/z_'+save_path+'_valid.pt')

    learn.zi_valid = torch.tensor([]).to(device)
    learn.labels = torch.tensor([]).to(device)
    learn.get_preds(ds_idx=0,cbs=[GetLatentSpace(cycle_len=1)])
    new_zi = torch.vstack((learn.zi_valid, new_zi))
    target = torch.hstack((learn.labels, target))

    if save: torch.save(new_zi, 'results/z_'+save_path+'.pt')

    return new_zi, target

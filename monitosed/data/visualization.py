# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00b_data.visualization.ipynb.

# %% auto 0
__all__ = ['plot_compare', 'plot_3d', 'plot_corr']

# %% ../../nbs/00b_data.visualization.ipynb 3
import numpy as np
import seaborn as sns
import plotly.graph_objs as go
from plotly import subplots

# %% ../../nbs/00b_data.visualization.ipynb 7
def plot_compare(rest, vr):
    
    mean_rest = rest.mean(0)
    mean_vr = vr.mean(0)

    fig = subplots.make_subplots(rows=len(mean_rest), cols=2, print_grid=False, shared_yaxes=True, shared_xaxes=True)

    a = np.linspace(0, mean_rest.shape[1], mean_rest.shape[1])

    for i in range(0, len(mean_rest)):
        data_rest = go.Scatter(x=a, y=mean_rest[i], line=dict(color='royalblue', width=2))
        data_vr = go.Scatter(x=a, y=mean_vr[i], line=dict(color='royalblue', width=2, dash='dot'))
        fig.append_trace(data_rest, i+1, 1)
        fig.append_trace(data_vr, i+1, 1)
        fig.update_yaxes(title_text=str(i), row=i+1)

    layout = go.Layout(title='Response Values for each Channel',
                       autosize=False,
                       width=3000,
                       height=8000)

    fig['layout'].update(layout, showlegend=False)
    fig.update_xaxes(visible=False)
    fig.update_yaxes(showticklabels=False)
    fig.show()

# %% ../../nbs/00b_data.visualization.ipynb 9
def plot_3d(mat):
    
    mean_mat = mat.mean(0)
    fault_level=250.0#plot a z-plane at height 1

    yy = np.linspace(0,mean_mat.shape[0], 100)
    zz = np.linspace(-12,12, 100)
    yy, zz = np.meshgrid(yy, zz)

    xx=fault_level*np.ones(yy.shape)

    fault_surface=go.Surface(x=xx, y=yy, z=zz, surfacecolor= xx, colorscale='Greys', opacity=0.7, showscale=False)

    fig = go.Figure(data=[go.Surface(z=mean_mat), fault_surface])

    fig.update_layout(title="evolution of signal in a trial", autosize=False,
                      width=500, height=500,
                      margin=dict(l=65, r=50, b=65, t=90), scene = dict(
                        xaxis_title='Time (ms)',
                        yaxis_title='Channels'))

    fig.show()

# %% ../../nbs/00b_data.visualization.ipynb 11
def plot_corr(mat):
    mean_mat = mat.mean(0)
    correlations = np.corrcoef(mean_mat)
    cmap = sns.diverging_palette(220, 10, as_cmap=True)

    mask = np.zeros_like(correlations, dtype=bool)
    mask[np.triu_indices_from(mask)] = True
    sns.heatmap(correlations, mask=mask, cmap=cmap)
